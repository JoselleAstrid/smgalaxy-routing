// Generated by CoffeeScript 1.9.3
(function() {
  var Action, Event, Item, Level, Main, Message, MessageUtil, Route, addLanguages, determineArgSets,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Item = (function() {
    Item.idLookup = {};

    Item.followingItemsLookup = {};

    function Item(name, details, messages) {
      var itemName, j, k, len, len1, message, ref, ref1, ref2;
      this.name = name;
      this.constructor.idLookup[this.name] = this;
      this.requirements = details.requirements;
      this.startLocation = details.start_location;
      this.endLocation = details.end_location;
      ref = details.follows;
      for (j = 0, len = ref.length; j < len; j++) {
        itemName = ref[j];
        if (itemName in this.constructor.followingItemsLookup) {
          this.constructor.followingItemsLookup[itemName].push(this);
        } else {
          this.constructor.followingItemsLookup[itemName] = [this];
        }
      }
      this.messages = [];
      for (k = 0, len1 = messages.length; k < len1; k++) {
        message = messages[k];
        this.messages.push({
          id: message['id'],
          "case": (ref1 = message['case']) != null ? ref1 : null,
          skippable: (ref2 = message['skippable']) != null ? ref2 : false
        });
      }
    }

    Item.prototype.frames = function(argSet) {
      var id, j, len, m, message, messageFrames, ref, totalFrames;
      totalFrames = 0;
      ref = this.messages;
      for (j = 0, len = ref.length; j < len; j++) {
        message = ref[j];
        if (message.skippable) {
          continue;
        }
        id = message.id;
        if (typeof id !== 'string') {
          id = id[argSet.character];
        }
        m = Message.lookup(id, argSet.langCode);
        messageFrames = m.frames(argSet, message["case"]);
        totalFrames += messageFrames;
      }
      return totalFrames;
    };

    Item.prototype.showFrameDetails = function(argSets) {
      var $h3, $itemDetails, $table, $tbody, $td, $tr, argSet, f, framesText, j, k, l, len, len1, len2, message, messageId, messageObj, ref, results;
      $itemDetails = $('#item-details');
      $itemDetails.empty();
      $h3 = $('<h3>').text(this.name);
      $itemDetails.append($h3);
      $table = $('<table>');
      $tbody = $('<tbody>');
      $table.append($tbody);
      $itemDetails.append($table);
      $tr = $('<tr>');
      $tr.append($('<td>').text("Message ID"));
      for (j = 0, len = argSets.length; j < len; j++) {
        argSet = argSets[j];
        $tr.append($('<td>').text(argSet.display));
      }
      $tbody.append($tr);
      ref = this.messages;
      results = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        message = ref[k];
        $tr = $('<tr>');
        $tbody.append($tr);
        $td = $('<td>');
        if (typeof message.id === 'string') {
          $td.text(message.id);
        } else {
          if (argSets[0].character === argSets[1].character) {
            $td.text(message.id[argSets[0].character]);
          } else {
            $td.append(document.createTextNode(message.id[argSets[0].character]));
            $td.append(document.createElement('br'));
            $td.append(document.createTextNode(message.id[argSets[1].character]));
          }
        }
        $td.addClass('message-id-display');
        $tr.append($td);
        for (l = 0, len2 = argSets.length; l < len2; l++) {
          argSet = argSets[l];
          if (typeof message.id === 'string') {
            messageId = message.id;
          } else {
            messageId = message.id[argSet.character];
          }
          messageObj = Message.lookup(messageId, argSet.langCode);
          framesText = messageObj.frames(argSet, message["case"]);
          $td = $('<td>').text(framesText);
          $tr.append($td);
          $td.addClass('message-frames');
          f = function(messageObj_, argSet_, messageCase_) {
            return messageObj_.showFrameDetails(argSet_, messageCase_);
          };
          $td.click(Util.curry(f, messageObj, argSet, message["case"]));
        }
        if (message.skippable) {
          results.push($tr.addClass('skippable'));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return Item;

  })();

  Action = (function(superClass) {
    extend(Action, superClass);

    Action.aliases = {};

    function Action(name, details, messages) {
      this.name = name;
      Action.__super__.constructor.call(this, this.name, details, messages);
      this.nameCellClass = 'name-action';
      this.addAlias(this.name);
    }

    Action.prototype.addAlias = function(alias) {
      return this.constructor.aliases[alias.toLowerCase()] = this;
    };

    Action.addAliases = function() {
      var action, alias, getAliases, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, replaceLastChar, results, starEndings;
      replaceLastChar = function(s1, s2) {
        return s1.slice(0, s1.length - 1) + s2;
      };
      getAliases = function(boolFunc) {
        var action, alias, aliasSubset, ref;
        if (boolFunc == null) {
          return Action.aliases;
        }
        aliasSubset = {};
        ref = Action.aliases;
        for (alias in ref) {
          action = ref[alias];
          if (boolFunc(alias)) {
            aliasSubset[alias] = action;
          }
        }
        return aliasSubset;
      };
      ref = getAliases(function(a) {
        return a.startsWith("bowser's ");
      });
      for (alias in ref) {
        action = ref[alias];
        action.addAlias(alias.replace("bowser's ", ""));
      }
      ref1 = getAliases(function(a) {
        return a.startsWith("bowser jr.'s ");
      });
      for (alias in ref1) {
        action = ref1[alias];
        action.addAlias(alias.replace("bowser jr.'s ", ""));
      }
      starEndings = ['1', '2', '3', 'h', 'g', 'l', 'c', 'p'];
      ref2 = getAliases(function(a) {
        return !a.endsWith(starEndings);
      });
      for (alias in ref2) {
        action = ref2[alias];
        if (action instanceof Level) {
          action.addAlias(alias + " 1");
        }
      }
      ref3 = getAliases(function(a) {
        return a.endsWith(" c");
      });
      for (alias in ref3) {
        action = ref3[alias];
        action.addAlias(replaceLastChar(alias, "4"));
        action.addAlias(replaceLastChar(alias, "comet"));
      }
      ref4 = getAliases(function(a) {
        return a.endsWith(" p");
      });
      for (alias in ref4) {
        action = ref4[alias];
        action.addAlias(replaceLastChar(alias, "100"));
        action.addAlias(replaceLastChar(alias, "purples"));
        action.addAlias(replaceLastChar(alias, "purple coins"));
        action.addAlias(replaceLastChar(alias, "purple comet"));
        if (alias === "gateway p") {
          action.addAlias(replaceLastChar(alias, "2"));
        } else {
          action.addAlias(replaceLastChar(alias, "5"));
        }
      }
      ref5 = getAliases();
      for (alias in ref5) {
        action = ref5[alias];
        if (alias === "good egg l" || alias === "honeyhive l" || alias === "buoy base g") {
          action.addAlias(replaceLastChar(alias, "h"));
        }
        if (alias === "battlerock l" || alias === "dusty dune g") {
          action.addAlias(replaceLastChar(alias, "h2"));
          action.addAlias(replaceLastChar(alias, "hidden 2"));
          action.addAlias(replaceLastChar(alias, "hidden star 2"));
          action.addAlias(replaceLastChar(alias, "s2"));
          action.addAlias(replaceLastChar(alias, "secret 2"));
          action.addAlias(replaceLastChar(alias, "secret star 2"));
          action.addAlias(replaceLastChar(alias, "7"));
        }
        if (alias === "battlerock l") {
          action.addAlias(replaceLastChar(alias, "g"));
        }
      }
      ref6 = getAliases(function(a) {
        return a.endsWith(" h");
      });
      for (alias in ref6) {
        action = ref6[alias];
        action.addAlias(replaceLastChar(alias, "hidden"));
        action.addAlias(replaceLastChar(alias, "hidden star"));
        action.addAlias(replaceLastChar(alias, "s"));
        action.addAlias(replaceLastChar(alias, "secret"));
        action.addAlias(replaceLastChar(alias, "secret star"));
        if (alias === "buoy base h") {
          action.addAlias(replaceLastChar(alias, "2"));
        } else {
          action.addAlias(replaceLastChar(alias, "6"));
        }
      }
      ref7 = getAliases(function(a) {
        return a.endsWith(" l");
      });
      for (alias in ref7) {
        action = ref7[alias];
        action.addAlias(replaceLastChar(alias, "luigi"));
        action.addAlias(replaceLastChar(alias, "luigi star"));
      }
      ref8 = getAliases(function(a) {
        return a.endsWith(" g");
      });
      results = [];
      for (alias in ref8) {
        action = ref8[alias];
        action.addAlias(replaceLastChar(alias, "green"));
        results.push(action.addAlias(replaceLastChar(alias, "green star")));
      }
      return results;
    };

    Action.prototype.text = function() {
      return "> " + this.name;
    };

    return Action;

  })(Item);

  Level = (function(superClass) {
    extend(Level, superClass);

    Level.starNameLookup = {};

    function Level(name, details, messages) {
      var starName;
      this.name = name;
      Level.__super__.constructor.call(this, this.name, details, messages);
      this.nameCellClass = 'name-level';
      this.starNameId = details.star_name;
      if (this.name.endsWith(" C")) {
        this.nameCellClass = 'name-level-comet';
      }
      if (this.name.endsWith(" P") && this.name !== "Gateway P") {
        this.nameCellClass = 'name-level-comet';
      }
      starName = this.starName('usenglish', 'mario');
      this.constructor.starNameLookup[starName.toLowerCase()] = this;
      starName = this.starName('usenglish', 'luigi');
      this.constructor.starNameLookup[starName.toLowerCase()] = this;
    }

    Level.prototype.starName = function(langCode, character) {
      var argSet, box;
      argSet = {
        character: character,
        langCode: langCode
      };
      box = Message.lookup(this.starNameId, langCode).computeBoxes(argSet, null)[0];
      return box.text;
    };

    Level.prototype.text = function(starCount, character) {
      if (!starCount) {
        return this.name + " - " + (this.starName('usenglish', character));
      }
      return (starCount.toString()) + ". " + this.name + " - " + (this.starName('usenglish', character));
    };

    return Level;

  })(Action);

  Event = (function(superClass) {
    extend(Event, superClass);

    function Event(name, details, messages) {
      this.name = name;
      Event.__super__.constructor.call(this, this.name, details, messages);
      this.nameCellClass = 'name-event';
    }

    Event.prototype.text = function() {
      return "* " + this.name + " ";
    };

    return Event;

  })(Item);

  MessageUtil = (function() {
    function MessageUtil() {}

    MessageUtil.hideMessageDetails = function() {
      $('#message-details').hide();
      return $('#route-table-container').show();
    };

    MessageUtil.decodeUTF16BigEndian = function(byteArray) {
      var codePoints, i, j, numCodePoints, ref;
      numCodePoints = byteArray.length / 2;
      codePoints = [];
      for (i = j = 0, ref = numCodePoints - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        codePoints.push(byteArray[i * 2], +byteArray[i * 2 + 1] << 8);
      }
      return String.fromCharCode.apply(String, codePoints);
    };

    MessageUtil.bytesStartWith = function(bytes, arr2) {
      var arr1;
      arr1 = bytes.slice(0, arr2.length);
      if (arr1.length !== arr2.length) {
        return false;
      }
      return arr1.every(function(element, index) {
        return element === arr2[index];
      });
    };

    MessageUtil.processEscapeSequence = function(escapeBytes, boxes, messageId, argSet, messageCase, displayColors, displayFurigana) {
      var colorByte, colorType, escapeBytesStartWith, furiganaBytes, furiganaStr, iconByte, iconName, kanjiCount, lastBox, numberNameType, obj, pauseLength, text, textMessage, textMessageId;
      if (displayColors == null) {
        displayColors = false;
      }
      if (displayFurigana == null) {
        displayFurigana = false;
      }
      escapeBytesStartWith = Util.curry(this.bytesStartWith, escapeBytes);
      lastBox = boxes[boxes.length - 1];
      if (escapeBytesStartWith([1, 0, 0, 0])) {
        pauseLength = escapeBytes[4];
        text = "<Text pause, " + (pauseLength.toString()) + "L>";
        if ('pauseLength' in lastBox) {
          lastBox.pauseLength += pauseLength;
        } else {
          lastBox.pauseLength = pauseLength;
        }
      } else if (escapeBytesStartWith([1, 0, 1])) {
        text = "";
        boxes.push({
          chars: 0,
          text: ""
        });
      } else if (escapeBytesStartWith([1, 0, 2])) {
        text = '<Lower-baseline text>';
      } else if (escapeBytesStartWith([1, 0, 3])) {
        text = '<Center align>';
      } else if (escapeBytesStartWith([2, 0, 0, 0, 0x53])) {
        text = '<Play voice audio>';
      } else if (escapeBytesStartWith([3, 0])) {
        iconByte = escapeBytes[2];
        iconName = messageLookup.icons[iconByte];
        text = "<" + iconName + " icon>";
        lastBox.chars += 1;
      } else if (escapeBytesStartWith([4, 0, 0])) {
        text = '<Small text>';
      } else if (escapeBytesStartWith([4, 0, 2])) {
        text = '<Large text>';
      } else if (escapeBytesStartWith([5, 0, 0, 0, 0])) {
        if (messageCase === 'general') {
          text = '<Player name>';
        } else {
          if (argSet.character === 'mario') {
            textMessageId = 'System_PlayerName000';
          } else if (argSet.character === 'luigi') {
            textMessageId = 'System_PlayerName100';
          }
          textMessage = Message.lookup(textMessageId, argSet.langCode);
          text = textMessage.computeBoxes(argSet, messageCase)[0].text;
          lastBox.chars += text.length;
        }
      } else if (escapeBytesStartWith([5, 0, 0, 1, 0])) {
        if (messageCase === 'general') {
          text = '<Mr. Plaaayer naaame>';
        } else {
          if (argSet.character === 'mario') {
            textMessageId = 'System_PlayerName001';
          } else if (argSet.character === 'luigi') {
            textMessageId = 'System_PlayerName101';
          }
          textMessage = Message.lookup(textMessageId, argSet.langCode);
          text = textMessage.computeBoxes(argSet, messageCase)[0].text;
          lastBox.chars += text.length;
        }
      } else if (escapeBytesStartWith([6] || escapeBytesStartWith([7]))) {
        if (messageId in messageLookup.numbersNames) {
          obj = messageLookup.numbersNames[messageId];
          numberNameType = obj._type;
          if (messageCase === 'general') {
            text = obj._placeholder;
          } else if (numberNameType === 'text') {
            if (messageCase in obj) {
              text = obj[messageCase];
            } else if (argSet.character in obj) {
              text = obj[argSet.character];
            }
            lastBox.chars += text.length;
          } else if (numberNameType === 'message') {
            if (messageCase in obj) {
              textMessageId = obj[messageCase];
            } else if (argSet.character in obj) {
              textMessageId = obj[argSet.character];
            }
            textMessage = Message.lookup(textMessageId, argSet.langCode);
            text = textMessage.computeBoxes(argSet, messageCase)[0].text;
            lastBox.chars += text.length;
          }
        } else {
          console.log("Don't know how to handle number/name variable", +("for message: " + messageId));
        }
      } else if (escapeBytesStartWith([9, 0, 5])) {
        text = 'xx:xx:xx';
        lastBox.chars += text.length;
      } else if (escapeBytesStartWith([0xFF, 0, 0])) {
        colorByte = escapeBytes[3];
        colorType = messageLookup.colors[colorByte];
        if (displayColors) {
          text = "<" + colorType + " color>";
        } else {
          text = "";
        }
      } else if (escapeBytesStartWith([0xFF, 0, 2])) {
        kanjiCount = escapeBytes[3];
        furiganaBytes = escapeBytes.slice(4);
        furiganaStr = this.decodeUTF16BigEndian(furiganaBytes);
        if (displayFurigana) {
          text = "<" + furiganaStr + ">";
        } else {
          text = "";
        }
      } else {
        console.log("Unknown escape sequence: " + escapeBytes);
      }
      return lastBox.text += text;
    };

    MessageUtil.boxTextDisplayHTML = function($el, box) {
      var boxTextLines, index, j, len, line, notLastLine, results;
      boxTextLines = box.text.split('\n');
      results = [];
      for (index = j = 0, len = boxTextLines.length; j < len; index = ++j) {
        line = boxTextLines[index];
        notLastLine = index < boxTextLines.length - 1;
        if (notLastLine) {
          line += '↵';
        }
        $el.append(document.createTextNode(line));
        if (notLastLine) {
          results.push($el.append($('<br>')));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    MessageUtil.computeBoxLength = function(box, langCode, $el) {
      var $finalResult, $li, $ul, alphaReq, alphaReqF32, charAlphaReq, f32, fadeRate, length, lengthF32, line, result;
      if ($el == null) {
        $el = null;
      }
      charAlphaReq = messageLookup.languageSpeeds[langCode].alphaReq;
      fadeRate = messageLookup.languageSpeeds[langCode].fadeRate;
      $ul = $('<ul>');
      if ($el != null) {
        $el.append($ul);
      }
      alphaReq = (box.chars * charAlphaReq) + 1;
      line = "(" + box.chars + " chars * " + charAlphaReq + " alpha req per char) + 1 extra alpha req = ";
      result = (alphaReq.toFixed(1)) + " alpha req";
      $li = $('<li>');
      $li.append(document.createTextNode(line));
      $li.append($('<span>').addClass('mid-result').text(result));
      $ul.append($li);
      length = Math.floor(alphaReq / fadeRate);
      line = "floor(... / " + fadeRate + " fade rate) = ";
      result = length + " length";
      $li = $('<li>');
      $li.append(document.createTextNode(line));
      $li.append($('<span>').addClass('mid-result').text(result));
      $ul.append($li);
      f32 = Math.fround;
      alphaReqF32 = f32(f32(box.chars) * f32(charAlphaReq)) + f32(1);
      lengthF32 = Math.floor(f32(f32(alphaReqF32) / f32(fadeRate)));
      if (length !== lengthF32) {
        length = lengthF32;
        line = "Due to 32-bit float imprecision, it's actually ";
        result = length + " length";
        $li = $('<li>');
        $li.append(document.createTextNode(line));
        $li.append($('<span>').addClass('mid-result').text(result));
        $ul.append($li);
      }
      if ('pauseLength' in box) {
        length += box.pauseLength;
        line = "... + " + box.pauseLength + " pause length = ";
        result = length + " length";
        $li = $('<li>');
        $li.append(document.createTextNode(line));
        $li.append($('<span>').addClass('mid-result').text(result));
        $ul.append($li);
      }
      box.length = length;
      $finalResult = $li.find('span.mid-result');
      return $finalResult.removeClass('mid-result').addClass('final-result');
    };

    MessageUtil.messageFrames = function(boxes, messageId, boxEndTimingError, $el) {
      var $finalResult, $li, $ul, animationTime, b, boxLength, boxLengths, frames, index, j, k, len, len1, line, numBoxes, result;
      if ($el == null) {
        $el = null;
      }
      boxLengths = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = boxes.length; j < len; j++) {
          b = boxes[j];
          results.push(b.length);
        }
        return results;
      })();
      $ul = $('<ul>');
      if ($el != null) {
        $el.append($ul);
      }
      if (indexOf.call(messageLookup.forcedSlow, messageId) >= 0) {
        line = "Forced slow text, so 1 frame per length unit";
        $ul.append($('<li>').text(line));
        frames = 0;
        for (index = j = 0, len = boxLengths.length; j < len; index = ++j) {
          boxLength = boxLengths[index];
          if (index > 0) {
            line = "... + ";
          } else {
            line = "";
          }
          frames += boxLength + 2;
          line += "(" + boxLength + " box length / 1) + 2 box end delay frames = ";
          result = frames + " frames";
          $li = $('<li>');
          $li.append(document.createTextNode(line));
          $li.append($('<span>').addClass('mid-result').text(result));
          $ul.append($li);
        }
      } else {
        line = "When holding A, 1 frame per 3 length units";
        $ul.append($('<li>').text(line));
        if (boxLengths.length > 1) {
          line = "When pressing A to end a box, the next box starts with up to 10 frames of slow text because A was re-pressed";
          $ul.append($('<li>').text(line));
        }
        frames = 0;
        for (index = k = 0, len1 = boxLengths.length; k < len1; index = ++k) {
          boxLength = boxLengths[index];
          if (index === 0) {
            frames += Math.ceil(boxLength / 3);
            line = "ceiling(" + boxLength + " box length / 3) ";
          } else {
            line = "... ";
            if (boxLength <= 10) {
              frames += boxLength;
              line += "+ (" + boxLength + " length / 1) ";
            } else {
              frames += 10 + Math.ceil((boxLength - 10) / 3);
              line += "+ (10 length / 1) ";
              line += "+ ceiling((" + boxLength + " length - 10) / 3) ";
            }
          }
          frames += 2;
          if (index === 0) {
            line += "+ 2 box-end delay frames = ";
          } else {
            line += "+ 2 delay frames = ";
          }
          result = frames + " frames";
          $li = $('<li>');
          $li.append(document.createTextNode(line));
          $li.append($('<span>').addClass('mid-result').text(result));
          $ul.append($li);
        }
      }
      if (boxEndTimingError > 0) {
        numBoxes = boxLengths.length;
        frames += numBoxes * boxEndTimingError;
        line = "... + (" + numBoxes + " box endings * " + boxEndTimingError + " frames of human timing error) = ";
        result = frames + " frames";
        $li = $('<li>');
        $li.append(document.createTextNode(line));
        $li.append($('<span>').addClass('mid-result').text(result));
        $ul.append($li);
      }
      if (messageId in messageLookup.animationTimes) {
        animationTime = messageLookup.animationTimes[messageId];
        frames = Math.max(frames, animationTime);
        line = "max(..., " + animationTime + " cutscene animation frames) = ";
        result = frames + " frames";
        $li = $('<li>');
        $li.append(document.createTextNode(line));
        $li.append($('<span>').addClass('mid-result').text(result));
        $ul.append($li);
      }
      $finalResult = $li.find('span.mid-result');
      $finalResult.removeClass('mid-result').addClass('final-result');
      return frames;
    };

    return MessageUtil;

  })();

  Message = (function() {
    Message.lookupStructure = {};

    function Message(id1, langCode1, data1) {
      this.id = id1;
      this.langCode = langCode1;
      this.data = data1;
      this.constructor.lookupStructure[this.id + "/" + this.langCode] = this;
    }

    Message.lookup = function(id, langCode) {
      return this.lookupStructure[id + "/" + langCode];
    };

    Message.prototype.computeBoxes = function(argSet, messageCase) {
      var box, boxes, item, j, k, lastBox, len, len1, newlineAfterBoxBreak, ref;
      boxes = [
        {
          chars: 0,
          text: ""
        }
      ];
      ref = this.data;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        lastBox = boxes[boxes.length - 1];
        if (typeof item === "string") {
          newlineAfterBoxBreak = item.charAt(0) === '\n' && lastBox.text === "";
          if (newlineAfterBoxBreak) {
            item = item.slice(1);
          }
          lastBox.chars += item.length;
          lastBox.text += item;
        } else {
          MessageUtil.processEscapeSequence(item, boxes, this.id, argSet, messageCase);
        }
      }
      for (k = 0, len1 = boxes.length; k < len1; k++) {
        box = boxes[k];
        MessageUtil.computeBoxLength(box, argSet.langCode);
      }
      return boxes;
    };

    Message.prototype.frames = function(argSet, messageCase) {
      var boxes, frames;
      boxes = this.computeBoxes(argSet, messageCase);
      frames = MessageUtil.messageFrames(boxes, this.id, argSet.boxEndTimingError);
      return frames;
    };

    Message.prototype.showFrameDetails = function(argSet, messageCase) {
      var $backButton, $h3, $messageDetails, $table, $tbody, $td, $tr, box, boxes, j, len;
      $messageDetails = $('#message-details');
      $messageDetails.empty();
      $backButton = $('<button>');
      $backButton.text("Back");
      $backButton.click(MessageUtil.hideMessageDetails);
      $messageDetails.append($backButton);
      $h3 = $('<h3>').text(this.id + ", " + argSet.display);
      $messageDetails.append($h3);
      $table = $('<table>');
      $tbody = $('<tbody>');
      $table.append($tbody);
      $('#route-table-container').hide();
      $messageDetails.show();
      boxes = this.computeBoxes(argSet, messageCase);
      for (j = 0, len = boxes.length; j < len; j++) {
        box = boxes[j];
        $tr = $('<tr>');
        $tbody.append($tr);
        $td = $('<td>');
        $td.addClass('box-text');
        MessageUtil.boxTextDisplayHTML($td, box);
        $tr.append($td);
        $td = $('<td>');
        $td.addClass('box-length-explanation');
        MessageUtil.computeBoxLength(box, argSet.langCode, $td);
        $tr.append($td);
      }
      MessageUtil.messageFrames(boxes, this.id, argSet.boxEndTimingError, $messageDetails);
      return $messageDetails.append($table);
    };

    return Message;

  })();

  Route = (function() {
    Route.numAndLevelRegex = /^\d+[\.|\)](.+)$/;

    Route.actionAndParensNoteRegex = /^(.+)\(.+\)$/;

    Route.starsReqRegex = /^(\d+) stars?$/;

    Route.lessThanStarsReqRegex = /^Less than (\d+) stars?$/;

    Route.starBitReqRegex = /^(\d+) star bits$/;

    Route.prototype.isComplete = false;

    function Route(text, category) {
      var action, j, len, line, lines;
      this.actions = [];
      lines = Util.splitlines(text);
      this.name = lines[0];
      lines = lines.slice(1);
      $('#route-status').empty();
      for (j = 0, len = lines.length; j < len; j++) {
        line = lines[j];
        line = line.trim();
        if (line === "") {
          continue;
        }
        action = this.lineToAction(line);
        if (!action) {
          this.addRouteStatus("Could not recognize as a level/action: " + line);
          break;
        } else if (action === 'comment') {
          continue;
        }
        this.actions.push(action);
      }
      if (category === "Any%") {
        this.endItemName = "Bowser's Galaxy Reactor";
        this.endRequirements = [];
      } else if (category === "120 Star") {
        this.endItemName = "Bowser's Galaxy Reactor";
        this.endRequirements = ["120 stars"];
      }
    }

    Route.prototype.addRouteStatus = function(s) {
      $('#route-status').append(document.createTextNode(s));
      return $('#route-status').append(document.createElement('br'));
    };

    Route.prototype.lineToAction = function(line) {
      var indexOfDash, match, possibleGalaxyAndNum, possibleStarName;
      line = line.toLowerCase();
      if (line.startsWith('*')) {
        return 'comment';
      }
      if (line.startsWith('>')) {
        line = line.slice(1).trim();
      }
      match = this.constructor.numAndLevelRegex.exec(line);
      if (match) {
        line = match[1].trim();
      }
      if (line in Action.aliases) {
        return Action.aliases[line];
      }
      match = this.constructor.actionAndParensNoteRegex.exec(line);
      if (match) {
        line = match[1].trim();
      }
      if (line in Action.aliases) {
        return Action.aliases[line];
      }
      if (line in Level.starNameLookup) {
        return Level.starNameLookup[line];
      }
      indexOfDash = line.indexOf('-');
      while (indexOfDash !== -1) {
        possibleGalaxyAndNum = line.slice(0, indexOfDash).trim();
        if (possibleGalaxyAndNum in Action.aliases) {
          return Action.aliases[possibleGalaxyAndNum];
        }
        possibleStarName = line.slice(indexOfDash + 1).trim();
        if (possibleStarName in Level.starNameLookup) {
          return Level.starNameLookup[possibleStarName];
        }
        indexOfDash = line.indexOf('-', indexOfDash + 1);
      }
      return null;
    };

    Route.prototype.fulfilledRequirement = function(req, completedItemNames, starCount) {
      var match, reqLessThanStars, reqStars;
      if (indexOf.call(completedItemNames, req) >= 0) {
        return true;
      }
      match = this.constructor.starsReqRegex.exec(req);
      if (match) {
        reqStars = Number(match[1].trim());
        if (starCount >= reqStars) {
          return true;
        }
      }
      match = this.constructor.lessThanStarsReqRegex.exec(req);
      if (match) {
        reqLessThanStars = Number(match[1].trim());
        if (starCount < reqLessThanStars) {
          return true;
        }
      }
      match = this.constructor.starBitReqRegex.exec(req);
      if (match) {
        return true;
      }
      return false;
    };

    Route.prototype.isEndOfRoute = function(item, completedItemNames, starCount) {
      var j, len, ref, req;
      if (this.endItemName) {
        if (item.name !== this.endItemName) {
          return false;
        }
      }
      ref = this.endRequirements;
      for (j = 0, len = ref.length; j < len; j++) {
        req = ref[j];
        if (!this.fulfilledRequirement(req, completedItemNames, starCount)) {
          return false;
        }
      }
      return true;
    };

    Route.prototype.checkAndAddEvents = function() {
      var action, completedItemNames, expectedActionName, followingItem, followingItems, greenStarCount, j, k, l, len, len1, len2, luigiStatus, ref, ref1, ref2, ref3, ref4, ref5, req, reqFailed, s, starCount, starCountStr;
      this.isComplete = false;
      this.items = [];
      starCount = 0;
      greenStarCount = 0;
      expectedActionName = null;
      completedItemNames = [];
      luigiStatus = {
        talkedAtGarage: false,
        luigiStars: 0,
        betweenStars: 0
      };
      ref = this.actions;
      for (j = 0, len = ref.length; j < len; j++) {
        action = ref[j];
        if (expectedActionName) {
          if (action.name !== expectedActionName) {
            s = "At this point the route must have: '" + expectedActionName + "' but instead it has: '" + action.name + "'";
            this.addRouteStatus(s);
          }
          expectedActionName = null;
        }
        ref1 = action.requirements;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          req = ref1[k];
          if (!this.fulfilledRequirement(req, completedItemNames, starCount)) {
            s = "'" + action.name + "' has an unfulfilled requirement: " + req;
            this.addRouteStatus(s);
            return;
          }
        }
        if (action.name === "Luigi letter 2") {
          if (!(luigiStatus.luigiStars === 1 && luigiStatus.betweenStars >= 5)) {
            s = "'" + action.name + "' has an unfulfilled requirement: Must have 1 Luigi star and 5 in-between stars since that Luigi star. Current status: " + luigiStatus.luigiStars.toString() + " Luigi star(s) and " + luigiStatus.betweenStars.toString() + " in-between star(s).";
            this.addRouteStatus(s);
            return;
          }
        } else if (action.name === "Luigi letter 3") {
          if (!(luigiStatus.luigiStars === 2 && luigiStatus.betweenStars >= 5)) {
            s = "'" + action.name + "' has an unfulfilled requirement: Must have 2 Luigi stars and 5 in-between stars since that Luigi star. Current status: " + luigiStatus.luigiStars.toString() + " Luigi star(s) and " + luigiStatus.betweenStars.toString() + " in-between star(s).";
            this.addRouteStatus(s);
            return;
          }
        }
        followingItems = [];
        if (action instanceof Level) {
          if (ref2 = action.name, indexOf.call(completedItemNames, ref2) >= 0) {
            this.items.push({
              item: action,
              starCount: null
            });
          } else {
            starCount += 1;
            this.items.push({
              item: action,
              starCount: starCount
            });
            if (starCount === 1) {
              starCountStr = "1 star";
            } else {
              starCountStr = starCount + " stars";
            }
            if (starCountStr in Item.followingItemsLookup) {
              followingItems.push.apply(followingItems, Item.followingItemsLookup[starCountStr]);
            }
          }
        } else {
          this.items.push({
            item: action
          });
        }
        completedItemNames.push(action.name);
        if (this.isEndOfRoute(action, completedItemNames, starCount)) {
          this.isComplete = true;
          return;
        }
        if ((ref3 = action.name) === "Battlerock L" || ref3 === "Buoy Base G" || ref3 === "Dusty Dune G") {
          greenStarCount += 1;
          if (greenStarCount === 1) {
            starCountStr = "1 green star";
          } else {
            starCountStr = greenStarCount + " green stars";
          }
          if (starCountStr in Item.followingItemsLookup) {
            followingItems.push.apply(followingItems, Item.followingItemsLookup[starCountStr]);
          }
        }
        if (action.name === "Talk to Luigi at Garage") {
          luigiStatus.talkedAtGarage = true;
        } else if (luigiStatus.talkedAtGarage && action instanceof Level) {
          if ((ref4 = action.name) === "Good Egg L" || ref4 === "Battlerock L" || ref4 === "Honeyhive L") {
            luigiStatus.luigiStars += 1;
            luigiStatus.betweenStars = 0;
          } else {
            luigiStatus.betweenStars += 1;
            if (luigiStatus.luigiStars === 0 && luigiStatus.betweenStars === 1) {
              followingItems.push(Item.idLookup["Luigi letter 1"]);
            }
          }
        }
        if (action.name in Item.followingItemsLookup) {
          followingItems.push.apply(followingItems, Item.followingItemsLookup[action.name]);
        }
        while (followingItems.length > 0) {
          followingItem = followingItems.shift();
          if (followingItem instanceof Action) {
            expectedActionName = followingItem.name;
            continue;
          }
          reqFailed = false;
          ref5 = followingItem.requirements;
          for (l = 0, len2 = ref5.length; l < len2; l++) {
            req = ref5[l];
            if (!this.fulfilledRequirement(req, completedItemNames, starCount)) {
              reqFailed = true;
            }
          }
          if (reqFailed) {
            continue;
          }
          this.items.push({
            item: followingItem
          });
          completedItemNames.push(followingItem.name);
          if (this.isEndOfRoute(followingItem, completedItemNames, starCount)) {
            return;
          }
          if (followingItem.name in Item.followingItemsLookup) {
            followingItems.push.apply(followingItems, Item.followingItemsLookup[followingItem.name]);
          }
        }
      }
    };

    Route.prototype.makeTable = function(argSets) {
      var $cell, $headerRow, $row, $rows, $table, $tableContainer, $tbody, $thead, $totalsRow, argSet, argSetCharacters, character, characterCounts, f, frames, index, item, itemObj, itemText, j, k, l, len, len1, len2, len3, len4, n, o, preferredCharacter, ref, secondsDiff, summary, textFrameTotals, total;
      $tableContainer = $('#route-table-container');
      $table = $('<table>');
      $tableContainer.empty().append($table);
      $thead = $('<thead>');
      $tbody = $('<tbody>');
      $table.append($thead);
      $table.append($tbody);
      $row = $('<tr>');
      $thead.append($row);
      $row.append($('<th>').text(this.name));
      for (j = 0, len = argSets.length; j < len; j++) {
        argSet = argSets[j];
        $row.append($('<th>').text(argSet.display));
      }
      characterCounts = {
        mario: 0,
        luigi: 0
      };
      argSetCharacters = (function() {
        var k, len1, results;
        results = [];
        for (k = 0, len1 = argSets.length; k < len1; k++) {
          argSet = argSets[k];
          results.push(argSet.character);
        }
        return results;
      })();
      for (k = 0, len1 = argSetCharacters.length; k < len1; k++) {
        character = argSetCharacters[k];
        characterCounts[character] += 1;
      }
      if (characterCounts['mario'] >= characterCounts['luigi']) {
        preferredCharacter = 'mario';
      } else {
        preferredCharacter = 'luigi';
      }
      textFrameTotals = (function() {
        var l, len2, results;
        results = [];
        for (l = 0, len2 = argSets.length; l < len2; l++) {
          argSet = argSets[l];
          results.push(0);
        }
        return results;
      })();
      ref = this.items;
      for (l = 0, len2 = ref.length; l < len2; l++) {
        itemObj = ref[l];
        item = itemObj.item;
        if (itemObj.starCount) {
          itemText = item.text(itemObj.starCount, preferredCharacter);
        } else {
          itemText = item.text();
        }
        $row = $('<tr>');
        $tbody.append($row);
        $row.addClass('route-item');
        f = function(item_, argSets_) {
          return item_.showFrameDetails(argSets_);
        };
        $row.click(Util.curry(f, item, argSets));
        $cell = $('<td>');
        $cell.text(itemText);
        $cell.addClass(item.nameCellClass);
        $row.append($cell);
        for (index = n = 0, len3 = argSets.length; n < len3; index = ++n) {
          argSet = argSets[index];
          frames = item.frames(argSet);
          $cell = $('<td>');
          $cell.text(frames);
          $row.append($cell);
          textFrameTotals[index] += frames;
        }
      }
      if (!this.isComplete) {
        return;
      }
      $totalsRow = $('<tr>');
      $tbody.append($totalsRow);
      $cell = $('<td>').text("Total of relative text times");
      $totalsRow.append($cell);
      for (o = 0, len4 = textFrameTotals.length; o < len4; o++) {
        total = textFrameTotals[o];
        $cell = $('<td>').text(total);
        $totalsRow.append($cell);
      }
      if (argSets.length === 2) {
        $headerRow = $thead.find('tr');
        $cell = $('<th>').text("Diff (f)");
        $headerRow.append($cell);
        $cell = $('<th>').text("Diff (s)");
        $headerRow.append($cell);
        $rows = $tbody.find('tr');
        $rows.each((function(_this) {
          return function(_, row) {
            var cell, cellTexts, frameDiff;
            cellTexts = (function() {
              var len5, p, ref1, results;
              ref1 = $(row).find('td');
              results = [];
              for (p = 0, len5 = ref1.length; p < len5; p++) {
                cell = ref1[p];
                results.push($(cell).text());
              }
              return results;
            })();
            frameDiff = Number(cellTexts[1]) - Number(cellTexts[2]);
            $cell = $('<td>').text(frameDiff);
            $(row).append($cell);
            $cell = $('<td>').text((frameDiff / (60 / 1.001)).toFixed(2));
            return $(row).append($cell);
          };
        })(this));
        secondsDiff = $totalsRow.find('td')[4].textContent;
        if (secondsDiff.charAt(0) === '-') {
          summary = argSets[0].display + " is " + (secondsDiff.slice(1)) + " seconds faster than " + argSets[1].display + " for this route";
        } else {
          summary = argSets[1].display + " is " + secondsDiff + " seconds faster than " + argSets[0].display + " for this route";
        }
        return $('#route-status').append($('<h3>').text(summary));
      }
    };

    return Route;

  })();

  determineArgSets = function(languageLookup) {
    var $field, argSet, argSets, char, fieldName, j, k, lang1, lang2, len, len1, ref, ref1, set;
    argSets = [];
    ref = ['set1', 'set2'];
    for (j = 0, len = ref.length; j < len; j++) {
      set = ref[j];
      argSet = {};
      ref1 = ['langCode', 'character', 'boxEndTimingError'];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        fieldName = ref1[k];
        $field = $("#" + set + "-" + fieldName);
        argSet[fieldName] = $field.val();
      }
      argSet.boxEndTimingError = Number(argSet.boxEndTimingError);
      argSets.push(argSet);
    }
    if (argSets[0].langCode !== argSets[1].langCode) {
      lang1 = languageLookup[argSets[0].langCode];
      lang2 = languageLookup[argSets[1].langCode];
      if (lang1.region !== lang2.region) {
        argSets[0].display = lang1.region;
        argSets[1].display = lang2.region;
      } else {
        argSets[0].display = lang1.language;
        argSets[1].display = lang2.language;
      }
    } else if (argSets[0].character !== argSets[1].character) {
      char = argSets[0].character;
      argSets[0].display = char.slice(0, 1).toUpperCase() + char.slice(1);
      char = argSets[1].character;
      argSets[1].display = char.slice(0, 1).toUpperCase() + char.slice(1);
    } else {
      argSets[0].display = argSets[0].boxEndTimingError.toString() + " BTE";
      argSets[1].display = argSets[1].boxEndTimingError.toString() + " BTE";
    }
    return argSets;
  };

  addLanguages = function(langCodes, callbackAfterInitAllLanguages) {
    var allLanguagesLoaded, callbackAfterLoadingLanguage, cb, j, langCode, len, results;
    allLanguagesLoaded = langCodes.every(function(code) {
      return (window.messages != null) && code in window.messages;
    });
    if (allLanguagesLoaded) {
      callbackAfterInitAllLanguages();
      return;
    }
    results = [];
    for (j = 0, len = langCodes.length; j < len; j++) {
      langCode = langCodes[j];
      if ((window.messages != null) && langCode in window.messages) {
        continue;
      }
      cb = function(langCode_, langCodes_, callbackAfterInitAllLanguages_) {
        var data, messageId, ref;
        ref = window.messages[langCode_];
        for (messageId in ref) {
          if (!hasProp.call(ref, messageId)) continue;
          data = ref[messageId];
          new Message(messageId, langCode_, data);
        }
        allLanguagesLoaded = langCodes_.every(function(code) {
          return code in window.messages;
        });
        if (allLanguagesLoaded) {
          return callbackAfterInitAllLanguages_();
        }
      };
      callbackAfterLoadingLanguage = Util.curry(cb, langCode, langCodes, callbackAfterInitAllLanguages);
      results.push(Util.readServerJSFile("js/messages/" + langCode + ".js", callbackAfterLoadingLanguage));
    }
    return results;
  };

  Main = (function() {
    function Main() {}

    Main.prototype.routeTextChanged = false;

    Main.prototype.init = function(itemDetails, itemMessages) {
      var callback;
      callback = Util.curry(this.init2, itemDetails, itemMessages);
      return addLanguages(['usenglish'], callback);
    };

    Main.prototype.init2 = function(itemDetails, itemMessages) {
      var $select, _, applySampleRoute, args, details, itemKey, j, k, l, lang, langCode, languageLookup, languages, len, len1, len2, n, num, obj, ref, ref1, ref2, ref3, set, sortFunc, text, value;
      for (itemKey in itemDetails) {
        if (!hasProp.call(itemDetails, itemKey)) continue;
        details = itemDetails[itemKey];
        args = [itemKey, details, (ref = itemMessages[itemKey]) != null ? ref : []];
        if (details.type === 'Level') {
          (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(Level, args, function(){});
        } else if (details.type === 'Action') {
          (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(Action, args, function(){});
        } else if (details.type === 'Event') {
          (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(Event, args, function(){});
        } else {
          console.log("Invalid item type: " + details.type);
        }
      }
      Action.addAliases();
      languages = [];
      languageLookup = {};
      ref1 = messageLookup.languageSpeeds;
      for (langCode in ref1) {
        if (!hasProp.call(ref1, langCode)) continue;
        _ = ref1[langCode];
        obj = {
          code: langCode,
          region: langCode.slice(0, 2).toUpperCase(),
          language: langCode.slice(2, 3).toUpperCase() + langCode.slice(3)
        };
        obj.display = obj.language + " (" + obj.region + ")";
        languages.push(obj);
        languageLookup[langCode] = obj;
      }
      sortFunc = function(a, b) {
        if (a.display < b.display) {
          return -1;
        } else if (a.display > b.display) {
          return 1;
        } else {
          return 0;
        }
      };
      languages.sort(sortFunc);
      ref2 = ['set1', 'set2'];
      for (j = 0, len = ref2.length; j < len; j++) {
        set = ref2[j];
        $select = $("#" + set + "-langCode");
        for (k = 0, len1 = languages.length; k < len1; k++) {
          lang = languages[k];
          $select.append($('<option>').attr('value', lang.code).text(lang.display));
          if (set === 'set1') {
            $select.val('usenglish');
          } else {
            $select.val('jpjapanese');
          }
        }
      }
      ref3 = ['set1', 'set2'];
      for (l = 0, len2 = ref3.length; l < len2; l++) {
        set = ref3[l];
        $select = $("#" + set + "-boxEndTimingError");
        for (num = n = 0; n <= 15; num = ++n) {
          value = num.toString();
          text = num.toString();
          if (text === "0") {
            text = "0 (TAS)";
          }
          $select.append($('<option>').attr('value', value).text(text));
        }
        $select.val("10");
      }
      document.getElementById('route-button').onclick = (function(_this) {
        return function(event) {
          var argSet, argSets, callback, category, route, routeText;
          $('#route-status').empty();
          routeText = document.getElementById('route-textarea').value;
          category = $('#route-category').val();
          route = new Route(routeText, category);
          route.checkAndAddEvents();
          if (!route.isComplete) {
            route.addRouteStatus("Route is incomplete!");
          }
          argSets = determineArgSets(languageLookup);
          callback = function() {
            return route.makeTable(argSets);
          };
          return addLanguages((function() {
            var len3, o, results;
            results = [];
            for (o = 0, len3 = argSets.length; o < len3; o++) {
              argSet = argSets[o];
              results.push(argSet.langCode);
            }
            return results;
          })(), callback);
        };
      })(this);
      $('.help-button').each(function() {
        var buttonIdRegex, clickCallback, helpTextId, result;
        buttonIdRegex = /^(.+)-button$/;
        result = buttonIdRegex.exec(this.id);
        helpTextId = result[1];
        clickCallback = function(helpTextId_, helpButtonE) {
          var $actionList, $helpText, id, item, ref4;
          $helpText = $('#' + helpTextId_);
          $helpText.dialog({
            modal: true,
            width: 500,
            height: 600,
            position: {
              my: "center top",
              at: "center bottom",
              of: helpButtonE
            }
          });
          $actionList = $('#action-list');
          if ($actionList.is(':empty')) {
            ref4 = Item.idLookup;
            for (id in ref4) {
              item = ref4[id];
              if ((item instanceof Action) && !(item instanceof Level)) {
                $actionList.append($('<li>').append($('<code>').text('> ' + item.name)));
              }
            }
          }
          return $helpText.scrollTop(0);
        };
        return $(this).click(Util.curry(clickCallback, helpTextId, this));
      });
      applySampleRoute = (function(_this) {
        return function(categoryValue, sampleRouteFilename) {
          var callback, message;
          if (_this.routeTextChanged) {
            message = "This'll overwrite the current route with the" + " Sample " + categoryValue + " route. Are you sure?";
            if (!confirm(message)) {
              return;
            }
            _this.routeTextChanged = false;
          }
          $('#route-category').val(categoryValue);
          callback = function(text) {
            return document.getElementById('route-textarea').value = text;
          };
          return Util.readServerTextFile(sampleRouteFilename, callback);
        };
      })(this);
      $('#sample-any-route-button').click(Util.curry(applySampleRoute, "Any%", "samplerouteany.txt"));
      $('#sample-120-route-button').click(Util.curry(applySampleRoute, "120 Star", "sampleroute120.txt"));
      return $('#route-textarea').change((function(_this) {
        return function() {
          return _this.routeTextChanged = true;
        };
      })(this));
    };

    return Main;

  })();

  window.main = new Main;

}).call(this);
